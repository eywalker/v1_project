%{
cd_dataset.SimulatedBehavior (computed) # simulated behavioral responses
->cd_dataset.SimulationParams
->cd_lc.TrainedLC
-----
->cd_dataset.DataSets
%}

classdef SimulatedBehavior < dj.Relvar & dj.AutoPopulate
    % Represents dataset generated by using a trained model to simulated the
    % full experiment, including neuroanl responses and outputs
    properties
		popRel = pro(cd_dataset.SimulationParams * cd_lc.TrainedLC) & 'lc_trainset_owner like "cd_dataset.CleanContrastSession%"' 
	end

	
    methods
        function self = SimulatedBehavior(varargin)
            self.restrict(varargin{:});
        end
        
        function dataSet = fetchDataSet(self, pack)
            if nargin < 2
                pack = true;
            end
            assert(count(self)==1, 'Only can fetch one dataset at a time!');
            tuple = fetch(self);
            
            dataSet = fetchDataSet(cd_lc.LCTrainSets & pro(self), false);
            [dset, decoder, model] = getAll(cd_lc.TrainedLC & pro(self));
            
            rng(tuple.simulation_seed, 'twister');
            resp = model.classifyLikelihood(dset);
            
            [dataSet.selected_class] = deal(resp{:});
            correct_response = strcmp(resp', {dataSet.stimulus_class});
            cr_cell = num2cell(correct_response);
            [dataSet.correct_response] = deal(cr_cell{:});
            isLeft = strcmp({dataSet.correct_direction}, 'Left');
            choseLeft = correct_response == isLeft; % using notXOR trick to flip boolean if correct_response is false
            [dataSet(choseLeft).selected_direction] = deal('Left');
            [dataSet(~choseLeft).selected_direction] = deal('Right');
            
            if pack
                dataSet = packData(dataSet);
            end
        end
    end
    
	methods(Access=protected)
        
		function makeTuples(self, key)
            tuple = key;
            model_label = fetch1(cd_lc.LCModels & key, 'lc_label');
            tuple = registerDataSet(cd_dataset.DataSets, self, tuple, ...
                ['Simulated behavior for: ',  model_label]);
            insert(self, tuple);
		end
    end

end